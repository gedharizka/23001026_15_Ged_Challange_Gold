{
	"info": {
		"_postman_id": "61663a04-8160-4f77-9b6a-a45a0a550302",
		"name": "Secondhand",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "11204532"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Registration",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"randomAuthName\",pm.variables.replaceIn(\"{{$randomUserName}}\"))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Body request is equal to response\", function () {\r",
									"    var requestBody = JSON.parse(pm.request.body.raw);\r",
									"    var responseBody = pm.response.json().user.name;\r",
									"    pm.expect(requestBody.user.name).to.equal(responseBody);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email format is valid in the request body\", function () {\r",
									"    var requestBody = JSON.parse(pm.request.body.raw);\r",
									"    var emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
									"    pm.expect(requestBody.user.email).to.match(emailRegex);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"user\": {\r\n    \"name\": \"{{randomAuthName}}\",\r\n    \"email\": \"{{randomAuthName}}@mail.com\",\r\n    \"password\": \"a1a1a1a1\"\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users.json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users.json"
							]
						},
						"description": "- Name with random_auth_name\n- Email with [random_auth_name@mail.com](https://mailto:random_auth_name@mail.com)\n- password:a1a1a1a1"
					},
					"response": []
				},
				{
					"name": "Signin-seller",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()\r",
									"const token = response.session.token\r",
									"const id = response.user.id\r",
									"const name = response.user.name\r",
									"\r",
									"pm.environment.set('token_seller', token)\r",
									"pm.environment.set('userId_serller', id)\r",
									"pm.environment.set('userName_seller', name)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Email Body request is equal to response\", function () {\r",
									"    var requestBody = JSON.parse(pm.request.body.raw);\r",
									"    var responseBody = pm.response.json().user.email;\r",
									"    pm.expect(requestBody.user.email).to.equal(responseBody);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email format is valid in the request body\", function () {\r",
									"    var requestBody = JSON.parse(pm.request.body.raw);\r",
									"    var emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
									"    pm.expect(requestBody.user.email).to.match(emailRegex);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const cookieJar = pm.cookies.jar();\r",
									"cookieJar.clear(pm.request.url, function (error){\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {},
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user\": {\r\n        \"email\": \"berneice55@mail.com\",\r\n        \"password\": \"a1a1a1a1\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/sign_in.json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"sign_in.json"
							]
						},
						"description": "- Check status code\n    \n- Check email on body req and response\n    \n- Check email format on body req"
					},
					"response": []
				},
				{
					"name": "Signin-buyer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()\r",
									"const token = response.session.token\r",
									"const id = response.user.id\r",
									"const name = response.user.name\r",
									"\r",
									"pm.environment.set('token_buyer', token)\r",
									"pm.environment.set('userId_buyer', id)\r",
									"pm.environment.set('userName_buyer', name)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Remove session cookie\r",
									"pm.cookies.clear('session');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const cookieJar = pm.cookies.jar();\r",
									"cookieJar.clear(pm.request.url, function (error){\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {},
						"disableCookies": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user\": {\r\n        \"email\": \"phantom@assasin.com\",\r\n        \"password\": \"binar@123\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/sign_in.json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"sign_in.json"
							]
						}
					},
					"response": []
				}
			],
			"description": "| Registration |  |\n| --- | --- |\n|  |  |"
		},
		{
			"name": "Categories",
			"item": [
				{
					"name": "Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The length of the kategori array is greater than zero\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    var kategori = responseData.categories\r",
									"\r",
									"    pm.expect(kategori.length).to.be.greaterThan(0, \"Users array should not be empty\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/categories.json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Categories By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/categories/1.json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories",
								"1.json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "List Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The length of the produk array is greater than zero\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    var produk = responseData.products\r",
									"    pm.expect(produk.length).to.be.greaterThan(0, \"Users array should not be empty\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products.json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const produkId = pm.response.json()\r",
									"\r",
									"pm.environment.set(\"produkId\", produkId.product.id)\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_seller}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "product[name]",
									"value": "{{$randomProductName}}",
									"type": "text"
								},
								{
									"key": "product[price]",
									"value": "1000000",
									"type": "text"
								},
								{
									"key": "product[description]",
									"value": "{{$randomLoremWords}}",
									"type": "text"
								},
								{
									"key": "product[status]",
									"value": "published",
									"type": "text"
								},
								{
									"key": "product[category_id]",
									"value": "1",
									"type": "text"
								},
								{
									"key": "product[images][]",
									"type": "file",
									"src": "/C:/Users/Gedha Rizka/Pictures/Wallpaper/lens_macro_camera_137662_1920x1080.jpg"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/products.json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Product For Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const produkId = pm.response.json()\r",
									"\r",
									"pm.environment.set(\"produkIdToDelete\", produkId.product.id)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_seller}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "product[name]",
									"value": "{{$randomProductName}}",
									"type": "text"
								},
								{
									"key": "product[price]",
									"value": "1000000",
									"type": "text"
								},
								{
									"key": "product[description]",
									"value": "{{$randomLoremWords}}",
									"type": "text"
								},
								{
									"key": "product[status]",
									"value": "published",
									"type": "text"
								},
								{
									"key": "product[category_id]",
									"value": "1",
									"type": "text"
								},
								{
									"key": "product[images][]",
									"type": "file",
									"src": "/C:/Users/Gedha Rizka/Pictures/Wallpaper/lens_macro_camera_137662_1920x1080.jpg"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/products.json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products/{{produkId}}.json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{produkId}}.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_seller}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "product[name]",
									"value": "{{$randomProductName}}",
									"type": "text"
								},
								{
									"key": "product[price]",
									"value": "{{$randomPrice}}",
									"type": "text"
								},
								{
									"key": "product[description]",
									"value": "{{$randomLoremWords}}",
									"type": "text"
								},
								{
									"key": "product[status]",
									"value": "published",
									"type": "text"
								},
								{
									"key": "product[category_id]",
									"value": "1",
									"type": "text"
								},
								{
									"key": "product[images][]",
									"type": "file",
									"src": "/C:/Users/Gedha Rizka/Pictures/Wallpaper/wallpaperflare.com_wallpaper (16).jpg"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/products/{{produkId}}.json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{produkId}}.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_seller}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/{{produkIdToDelete}}.json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{produkIdToDelete}}.json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Offers",
			"item": [
				{
					"name": "Create Offer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_buyer}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"offer\": {\r\n    \"price\": 10000,\r\n    \"to_id\": {{userId_serller}},\r\n    \"product_id\": {{produkId}}\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/offers.json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"offers.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Offers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_seller}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId_buyer}}/offers.json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId_buyer}}",
								"offers.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Offer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_seller}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"offer\": {\r\n    \"status\": \"accepted\"\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/offers/40923.json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"offers",
								"40923.json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Profiles",
			"item": [
				{
					"name": "Profiles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_seller}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/profiles.json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"profiles.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Profiles Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_seller}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user[name]",
									"value": "{{randomAuthName}}",
									"type": "text"
								},
								{
									"key": "user[phone_number]",
									"value": "{{$randomPhoneNumberExt}}",
									"type": "text"
								},
								{
									"key": "user[address]",
									"value": "{{$randomStreetAddress}}",
									"type": "text"
								},
								{
									"key": "user[city_id]",
									"value": "2",
									"type": "text"
								},
								{
									"key": "user[avatar]",
									"type": "file",
									"src": "/C:/Users/Gedha Rizka/Pictures/Wallpaper/wallpaperflare.com_wallpaper (19).jpg"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/profiles.json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"profiles.json"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}